---
format: 
  html:
    theme: [source/custom.scss, none]
editor: source
execute:
  echo: false
  output: false
---

::: setup
{{< include source/scrollytelling.qmd >}}

```{r}
#| include: false
# Read functions & packages
# Only the github version of leaflet supports terra, in place of raster, which is now required as sp (on which raster depends) is being deprecated
# devtools::install_github('rstudio/leaflet')
source("source/fns.R")
source("source/helpers.R")

city_dir <- paste_path("mnt/", readLines("city-dir.txt"))
user_input_dir <- paste_path(city_dir, "01-user-input/")
process_output_dir <- paste_path(city_dir, "02-process-output/")
spatial_dir <- paste_path(process_output_dir, "spatial/")
output_dir <- paste_path(city_dir, "03-render-output/")
styled_maps_dir <- "generated/styled-maps/"

# City parameters
city_params <- read_yaml(paste_path(user_input_dir, "city_inputs.yml"))
# cities <- list.files("cities")
city <- city_params$city_name
city_string <- tolower(city) %>% stringr::str_replace_all(" ", "-")
country <- city_params$country

# Load map layer parameters
layer_params <- read_yaml('source/layers.yml')
```

```{r}
#| include: false
# Visualization parameters (Am I using all of them?)
basemap_opacity <- 0.3
legend_opacity <- 0.8
vwidth <- 900
vheight <- vwidth
layer_alpha <- 0.8
map_width <- 6.9
map_height <- 5.9
aspect_ratio <- map_width / map_height
# this is to enable fractional zoom in mapshot
useragent <- 'Mozilla/5.0 (compatible; MSIE 10.6; Windows NT 6.1; Trident/5.0; InfoPath.2; SLCC1; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 2.0.50727) 3gpp-gba UNTRUSTED/1.0'
```

---
title: "`r paste(city, country, sep = ', ')` Future City Scan"
---

```{r}
# Get text
city_text <- read_md(file.path(user_input_dir, "text-files/manual-text.md"))
generic_text <- read_yaml("source/generic-text.yml")
slide_texts <- merge_lists(city_text, generic_text)
```

```{r}
#| include: false

# Define the AOI
aoi <- st_read(paste_path(user_input_dir, "AOI"))
aoi_bounds <- st_bbox(aoi)
static_map_bounds <- aspect_buffer(aoi, aspect_ratio, buffer_percent = 0.05)
# Inititate the map here, will build on it in each "slide"
all_maps <- plot_basemap("vector")
pop_maps <-plot_basemap("satellite")
gdp_maps <-plot_basemap("vector")
urbanland_maps <-plot_basemap("vector")
#ssp layers 
ssp2 <-plot_basemap("vector")
ssp3 <-plot_basemap("vector")
ssp5 <-plot_basemap("vector")
year_2020 <-plot_basemap("vector")
year_2050 <-plot_basemap("vector")
year_2100 <-plot_basemap("vector")
zoom <- round(14.6 + -0.00015 * units::drop_units(sqrt(st_area(aoi))))
#tiles <- annotation_map_tile(type = "cartolight", zoom = zoom)

# Keep track of added layers
added_layers <- c()
pop_layers <- c()
gdp_layers <-c()
ul_layers <-c()
ahe_layers <-c()
uhi_layers <-c()
pu_layers <-c()
fu_layers <-c()
comb_layers <-c()
```
:::

::: topbar
# {{< meta title >}}

::: navigation
```{r}
# Load necessary libraries
library(htmltools)

# Define function to handle selection
selectYearAndSSP <- function(year, ssp) {
  cat("Selected Year:", year, "\n")
  cat("Selected SSP:", ssp, "\n")
}

# Define options for year and SSP
yearOptions <- c('2020','2050','2080','2100')
sspOptions <- c('SSP2','SSP3', 'SSP5')

# Generate dropdown items for year and SSP
yearDropdownItems <- lapply(yearOptions, function(year) {
  tags$div(
    class = "dropdown-item",
    onmouseover = sprintf("selectYearAndSSP('%s', $('#sspDropdown').val())", year),
    year
  )
})

sspDropdownItems <- lapply(sspOptions, function(ssp) {
  tags$div(
    class = "dropdown-item",
    onmouseover = sprintf("selectYearAndSSP($('#yearDropdown').val(), '%s')", ssp),
    ssp
  )
})

# Dropdown wrapper for year
yearDropdownWrapper <- tags$div(
  class = "dropdown",
  tags$button(
    class = "btn btn-primary dropdown-toggle",
    type = "button",
    id = "yearDropdownButton",
    `data-toggle` = "dropdown",
    `aria-haspopup` = "true",
    `aria-expanded` = "false",
    "Select Year"
  ),
  tags$div(
    class = "dropdown-menu",
    `aria-labelledby` = "yearDropdownButton",
    yearDropdownItems
  )
)

# Dropdown wrapper for SSP
sspDropdownWrapper <- tags$div(
  class = "dropdown",
  tags$button(
    class = "btn btn-primary dropdown-toggle",
    type = "button",
    id = "sspDropdownButton",
    `data-toggle` = "dropdown",
    `aria-haspopup` = "true",
    `aria-expanded` = "false",
    "Select SSP"
  ),
  tags$div(
    class = "dropdown-menu",
    `aria-labelledby` = "sspDropdownButton",
    sspDropdownItems
  )
)

# Custom CSS for button styles and positioning
customStyles <- "
.btn-primary {
  background-color: transparent;
  border: none;
  color: black;
  margin-top: -1mm; /* Move buttons 1mm up */
}

.btn-primary:hover {
  color: lightblue;
}
"

# Custom JavaScript to show dropdown on hover
js_code <- '
$(".dropdown").hover(
  function() {
    $(this).addClass("show");
    $(this).find(".dropdown-menu").addClass("show");
  },
  function() {
    $(this).removeClass("show");
    $(this).find(".dropdown-menu").removeClass("show");
  }
);
'

# Combine dropdowns, CSS, and JavaScript
dropdownWrapper <- tagList(
  yearDropdownWrapper,
  sspDropdownWrapper,
  tags$style(HTML(customStyles)),
  tags$script(HTML(js_code))
)

dropdownWrapper
```

```{r}
#| output: asis
# Dynamically add sections to table of contents ... there's probably a better way?
sections <- readLines("index3.qmd") %>%
  subset(str_detect(., "^##")) %>% str_replace("# ", "- ") %>% str_replace_all("#", "  ")

anchors <- sections %>% str_extract("^\\s*- (.*$)", group = T) %>% tolower() %>% str_replace_all(c("[^a-z\\s]" = "", "\\s+" = "-")) %>%
  str_replace("(.*)", "(#\\1)")
paste0(str_replace(sections, "(^\\s*- )(.+$)", "\\1[\\2]"), anchors) %>% { cat("- <span id='dynamic-header'>Future City Scan</span>  &or;", ., sep = "\n") }

dropdownWrapper
```
:::
:::

::: text-column
# {{< meta title >}}

## Setting the Context

### Basic City Information

```{r}
# Add a map layer? But it's just the AOI
```

```{r}
#| output: asis
print_slide_text(slide_texts$setting_the_context$basic_city_info)
```

<!-- ### The State of Urban Infrastructure and Service Delivery -->

<!-- ```{r} -->

<!-- #| output: asis -->

<!-- print_slide_text(slide_texts$setting_the_context$infrastructure_and_service_delivery) -->

<!-- ``` -->
## Service Delivery
::: {.callout-caution collapse="true"}
## Housing and Urban Development
Do we need to add this for FCS?
:::

::: {.callout-caution collapse="true"}
## Water Supply and Hygiene
Do we need to add this for FCS?
:::

::: {.callout-caution collapse="true"}
## Governance
Do we need to add this for FCS?
:::

::: {.callout-caution collapse="true"}
## Disaster Management and Recovery
Do we need to add this for FCS?
:::
## Population and Demographic Trends

### Population Growth

<!-- ![](generated/generated/plots/oxford-pop-growth.png) -->

```{r, output=TRUE}
# saveRDS(density_plot, "generated/plots/density.rds")
popdynamics <- read.csv("generated/popdynamics.csv")
names(popdynamics) <- sapply(str_remove_all(colnames(popdynamics), "X"), "[")
m <- as.matrix(popdynamics[, -1])
rownames(m) <- popdynamics[['Scenario']]
plot_ly(z = m, colorscale = "RdOrYl") %>%
  add_heatmap(x = colnames(m), y = rownames(m)) %>%
  layout(
    xaxis = list(title = "Year"),
    yaxis = list(title = "SSP")
  )
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_demographics$population_growth)
```

### Population Growth (chart)

<!-- ![](generated/plots/oxford-pop-density-scatter.png) -->

```{r, output=TRUE}
# saveRDS(density_plot, "generated/plots/density.rds")
#ggplotly(readRDS("generated/plots/density.rds") + labs(y = "People per square kilometer"))
# matplot(t(m), type = "l",lty = 1,  xlab = "SSP Scenario", 
#         ylab = "Population Growth")
# legend("topleft", legend = rownames(m),col = 1:ncol(t(m)), lty = 1, cex = 0.8)
plot_pop <- plot_ly(x = colnames(m)) 

for (i in 1:nrow(m)) {
  plot_pop <- add_trace(plot_pop, 
                    y = m[i,], 
                    type = 'scatter', 
                    mode = 'lines',
                    name = rownames(m)[i])
}

# Add layout
plot_pop <- layout(plot_pop,
               title = "Population Growth by SSP Scenario",
               xaxis = list(title = "SSP Scenario"),
               yaxis = list(title = "Population Growth"))
plot_pop
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_demographics$population_density_chart)
```

### Population Density SSP2_2050

```{r}
#| include: false
# Read population data
pop <- fuzzy_read(spatial_dir, "popdynamics_SSP2_2050",rast)
values(pop)[values(pop) == 0] <-NA
add_pop_layer <- create_layer_function(data = pop, yaml_key = "pop",group_id="population-density-ssp2_2050",title="Population Density")
all_maps <- add_pop_layer(all_maps)
ssp2 <- add_pop_layer(ssp2)
year_2050 <- add_pop_layer(year_2050)
  # This could be put into the add_*_layer() functions themselves
  # hideGroup("population-density")
pop_layers <- c(pop_layers, "population-density-ssp2_2050")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_demographics$population_density_SSP2_2050)
```

### Population Density SSP2_2100

```{r}
#| include: false
# Read population data
pop1 <- fuzzy_read(spatial_dir, "clipped_popdynamics_SSP2_2100",rast)
values(pop1)[values(pop1) == 0] <-NA
add_pop1_layer <- create_layer_function(data = pop1, yaml_key = "pop",group_id="population-density-ssp2_2100",title="Population Density")
all_maps <- add_pop1_layer(all_maps)
ssp2 <-add_pop1_layer(ssp2)
year_2100 <-add_pop1_layer(year_2100)
  # This could be put into the add_*_layer() functions themselves
  # hideGroup("population-density")
pop_layers <- c(pop_layers, "population-density-ssp2_2100")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_demographics$population_density_SSP2_2100)
```

### Population Density SSP5_2050

```{r}
 #include: false
pop2 <- fuzzy_read(spatial_dir, "popdynamics_SSP5_2050",rast)
values(pop2)[values(pop2) == 0] <-NA
add_pop2_layer <- create_layer_function(data = pop2, yaml_key = "pop",group_id="population-density-ssp5_2050",title="Population Density")
all_maps <- add_pop2_layer(all_maps)
ssp5 <- add_pop1_layer(ssp5)
year_2050 <- add_pop1_layer(year_2050)
# # #   # This could be put into the add_*_layer() functions themselves
# # #   # hideGroup("population-density")
pop_layers <- c(pop_layers, "population-density-ssp5_2050")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_demographics$population_density_SSP5_2050)
```

### Population Density SSP5_2100

```{r}
#| include: false
# Read population data
pop3 <- fuzzy_read(spatial_dir, "popdynamics_SSP5_2100",rast)
values(pop3)[values(pop3) == 0] <-NA
add_pop3_layer <- create_layer_function(data = pop3, yaml_key = "pop",group_id="population-density-ssp5_2100",title="Population Density")

all_maps <- add_pop3_layer(all_maps)
ssp5 <- add_pop3_layer(ssp5)
year_2100 <- add_pop3_layer(year_2100)
  # This could be put into the add_*_layer() functions themselves
  # hideGroup("population-density")
pop_layers <- c(pop_layers, "population-density-ssp5_2100")
```

```{r}
# add_pop3_layer <- create_layer_function(data = pop3, yaml_key = "pop",title="POP",group_id="population-density-ssp5_2050")
# add_pop3_layer(plot_basemap())
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_demographics$population_density_SSP5_2100)
```

## GDP

### GDP Projections

<!-- ![](generated/generated/plots/oxford-pop-growth.png) -->

```{r, output=TRUE}
# saveRDS(density_plot, "generated/plots/density.rds")
#ggplotly(readRDS("generated/plots/density.rds") + labs(y = "People per square kilometer"))
gdp <-read.csv("generated/gdp.csv")
names(gdp)<-sapply(str_remove_all(colnames(gdp),"X"),"[")
g <- as.matrix(gdp[, -1])
rownames(g) <- gdp[['Scenario']]
plot_ly(z = g, colorscale = "RdOrYl") %>%
  add_heatmap(x = colnames(g), y = rownames(g)) %>%
  layout(
    title = "GDP",
    xaxis = list(title = "Year"),
    yaxis = list(title = "Scenario")
  )
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_gross_domestic_product$gdp_growth)
```

### Projected GDP Growth(chart)

<!-- ![](generated/plots/oxford-pop-density-scatter.png) -->

```{r, output=TRUE}
# saveRDS(density_plot, "generated/plots/density.rds")
#ggplotly(readRDS("generated/plots/density.rds") + labs(y = "People per square kilometer"))
rownames(g) <- gdp[['Scenario']]
plot_gdp <- plot_ly(x = colnames(g)) 
for (i in 1:nrow(g)) {
  plot_gdp <- add_trace(plot_gdp, 
                    y = g[i,], 
                    type = 'scatter', 
                    mode = 'lines',
                    name = rownames(g)[i])
}
plot_gdp <- layout(plot_gdp,
               title = "GDP by SSP Scenario",
               xaxis = list(title = "SSP Scenario"),
               yaxis = list(title = "GDP Growth"))
plot_gdp
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_gross_domestic_product$gdp_chart)
```

### GDP SSP2_2050

```{r}
#| include: false
gdp <- fuzzy_read(spatial_dir, "gdp_SSP2_2050",rast)
#gdp <- fuzzy_read(spatial_dir, "gdp_SSP2_2050.tif", rast)
values(gdp)[values(gdp) == 0] <-NA
#gdp <- as.polygons(gdp, digits=4)
add_gdp_layer <- create_layer_function(data = gdp, yaml_key = "gdp",group_id="gdp-ssp2_2050",title="GDP")
all_maps <- add_gdp_layer(all_maps)
ssp2 <- add_gdp_layer(ssp2)
year_2050 <-add_gdp_layer(year_2050)
#   # This could be put into the add_*_layer() functions themselves
#   # hideGroup("population-density")
gdp_layers <- c(gdp_layers, "gdp-ssp2_2050")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_gross_domestic_product$gdp_SSP2_2050)
```

### GDP SSP2_2100

```{r}
#| include: false
gdp1 <- fuzzy_read(spatial_dir, "gdp_SSP2_2100",rast)
values(gdp1)[values(gdp1) == 0] <-NA
add_gdp1_layer <- create_layer_function(data = gdp1, yaml_key = "gdp",group_id="gdp-ssp2_2100",title="GDP")
all_maps <- add_gdp1_layer(all_maps)
ssp2<-add_gdp1_layer(ssp2)
year_2100<-add_gdp1_layer(year_2100)
gdp_layers <- c(gdp_layers, "gdp-ssp2_2100")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_gross_domestic_product$gdp_SSP2_2100)
```

### GDP SSP5_2050

```{r}
#| include: false
gdp2 <- fuzzy_read(spatial_dir, "gdp_SSP5_2050",rast)
values(gdp2)[values(gdp2) == 0] <-NA
add_gdp2_layer <- create_layer_function(data = gdp2, yaml_key = "gdp",group_id="gdp-ssp5_2050",title="GDP")
all_maps <- add_gdp2_layer(all_maps)
ssp5 <-add_gdp2_layer(ssp5)
year_2050<-add_gdp2_layer(year_2050)
gdp_layers <- c(gdp_layers, "gdp-ssp5_2050")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_gross_domestic_product$gdp_SSP5_2050)
```

### GDP SSP5_2100

```{r}
#| include: false
 gdp3 <- fuzzy_read(spatial_dir, "gdp_SSP5_2100",rast)
values(gdp3)[values(gdp3) == 0] <-NA
 add_gdp3_layer <- create_layer_function(data = gdp3, yaml_key = "gdp",group_id="gdp-ssp5_2100",title="GDP")
 all_maps <- add_gdp3_layer(all_maps)
ssp5 <-add_gdp3_layer(ssp5)
year_2100 <-add_gdp3_layer(year_2100)
 gdp_layers <- c(gdp_layers, "gdp-ssp5_2100")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_gross_domestic_product$gdp_SSP5_2100)
```

## Heat Flux

### Heatflux Growth(chart)

<!-- ![](generated/plots/oxford-pop-density-scatter.png) -->

```{r, output=TRUE}
# saveRDS(density_plot, "generated/plots/density.rds")
#ggplotly(readRDS("generated/plots/density.rds") + labs(y = "People per square kilometer"))
ahe_graph <-read.csv("generated/heatflux.csv")
names(ahe_graph)<-sapply(str_remove_all(colnames(ahe_graph),"X"),"[")
h <- as.matrix(ahe_graph[, -1])
rownames(h) <- ahe_graph[['Scenario']]
custom_colors <- c("#FF0000","#FFFF00")
plot_ahe <- plot_ly()

for (i in 1:nrow(h)) {
  plot_ahe <- add_trace(plot_ahe, 
                    x = colnames(h), 
                    y = h[i,], 
                    type = 'bar',
                    name = rownames(h)[i],
                    marker = list(color = custom_colors[i], 
                                      line = list(width = 1),  # Adjust bar border width if needed
                                      width = 0.2))
}

plot_ahe <- layout(plot_ahe,
               title = "Anthropogenic Heat Flux by SSP Scenario",
               xaxis = list(title = "Year"),
               yaxis = list(title = "Heat Flux"),
               barmode = 'group')  # Group bars by scenario

# Show the plot
plot_ahe

```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_ahe$ahe_growth)
```

### Heat Flux SSP3_2050

```{r}
#| include: false
ahe <- fuzzy_read(spatial_dir, "AHE_ssp3_2050",rast)
ahe <- mask(ahe, aoi)
add_ahe_layer <- create_layer_function(data = ahe, yaml_key = "ahe",group_id="heat-flux-ssp3_2050",title="Heat Flux")
all_maps <- add_ahe_layer(all_maps)
#   # This could be put into the add_*_layer() functions themselves
#   # hideGroup("population-density")
 ahe_layers <- c(ahe_layers, "heat-flux-ssp3_2050")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_ahe$ahe_SSP3_2050)
```

## Urban Land

### Urban Land Projections

<!-- ![](generated/generated/plots/oxford-pop-growth.png) -->

```{r, output=TRUE}
ul_graph <-read.csv("generated/urbanland.csv")
names(ul_graph)<-sapply(str_remove_all(colnames(ul_graph),"X"),"[")
u <- as.matrix(ul_graph[, -1])
rownames(u) <- ul_graph[['Scenario']]
years <- as.numeric(colnames(u))
start_year <- 2020
start_index <- which(years >= start_year)[1]

# Subset the matrix to include data from 2020 onwards
u_subset <- u[, start_index:length(years)]

# Plot the heatmap
plot_ly(z = u_subset, colorscale = "RdOrYl") %>%
  add_heatmap(x = colnames(u_subset), y = rownames(u_subset)) %>%
  layout(
    xaxis = list(title = "Year"),
    yaxis = list(title = "Urban Land Growth")
  )
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_ul$ul_growth)
```

### Urban Land Growth(chart)

<!-- ![](generated/plots/oxford-pop-density-scatter.png) -->

```{r, output=TRUE}
# saveRDS(density_plot, "generated/plots/density.rds")
#ggplotly(readRDS("generated/plots/density.rds") + labs(y = "People per square kilometer"))
plot_ul <- plot_ly(x = colnames(u)) 

for (i in 1:nrow(u)) {
  plot_ul <- add_trace(plot_ul, 
                    y = u[i,], 
                    type = 'scatter', 
                    mode = 'lines',
                    name = rownames(u)[i])
}

plot_ul <- layout(plot_ul,
               title = "Urban Land Expansion by SSP Scenario",
               xaxis = list(title = "SSP Scenario"),
               yaxis = list(title = "Urban Land Expansion"))
plot_ul

```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_ul$ul_chart)
```

### Urban Land SSP2_2050

```{r}
#| include: false
ul <- fuzzy_read(spatial_dir, "urbanland_ssp2_2050",rast)
values(ul)[values(ul) == 0] <-NA
add_ul_layer <- create_layer_function(data = ul, yaml_key = "ul",group_id="urban-land-ssp2_2050",title="Uquarto publishrban Land")
all_maps <- add_ul_layer(all_maps)
#   # This could be put into the add_*_layer() functions themselves
#   # hideGroup("population-density")
ul_layers <- c(ul_layers, "urban-land-ssp2_2050")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_ul$ul_SSP2_2050)
```

### Urban Land SSP2_2100

```{r}
#| include: false
ul1 <- fuzzy_read(spatial_dir, "urbanland_ssp2_2100",rast)
values(ul1)[values(ul1) == 0] <-NA
add_ul1_layer <- create_layer_function(data = ul1, yaml_key = "ul",group_id="urban-land-ssp2_2100",title="Urban Land")
 all_maps <- add_ul1_layer(all_maps)
#   # This could be put into the add_*_layer() functions themselves
#   # hideGroup("population-density")
ul_layers <- c(ul_layers, "urban-land-ssp2_2100")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_ul$ul_SSP2_2100)
```

### Urban Land SSP5_2050

```{r}
#| include: false
ul2 <- fuzzy_read(spatial_dir, "urbanland_ssp5_2050",rast)
values(ul2)[values(ul2) == 0] <-NA
add_ul2_layer <- create_layer_function(data = ul2, yaml_key = "ul",group_id="urban-land-ssp5_2050",title="Urban Land")
all_maps <- add_ul2_layer(all_maps)
#   # This could be put into the add_*_layer() functions themselves
#   # hideGroup("population-density")
ul_layers <- c(ul_layers, "urban-land-ssp5_2050")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_ul$ul_SSP5_2050)
```

### Urban Land SSP5_2100

```{r}
#| include: false
ul3 <- fuzzy_read(spatial_dir, "urbanland_ssp5_2100",rast)
values(ul3)[values(ul3) == 0] <-NA
 add_ul3_layer <- create_layer_function(data = ul3, yaml_key = "ul",group_id="urban-land-ssp5_2100",title="Urban Land")
 all_maps <- add_ul3_layer(all_maps)
#   # This could be put into the add_*_layer() functions themselves
#   # hideGroup("population-density")
 ul_layers <- c(ul_layers, "urban-land-ssp5_2100")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_ul$ul_SSP5_2100)
```

## Climate

### Temperature

```{r, output=TRUE}
temp_graph <- read.csv("generated/temperature.csv")
# Convert "date" column to Date type
temp_graph$date <- as.Date(temp_graph$time)
# Convert "date" column to Date type
plots_temp <- visualize_temperature(temp_graph,city, save_path="generated/temperature plots")
```

```{=html}
<div class="iframe-container" id="iframe-container">
  <iframe class="iframe" src="generated/temperature plots/plot_1.html"></iframe>
  <iframe class="iframe" src="generated/temperature plots/plot_2.html"></iframe>
  <iframe class="iframe" src="generated/temperature plots/plot_3.html"></iframe>
  <iframe class="iframe" src="generated/temperature plots/plot_4.html"></iframe>
  <iframe class="iframe" src="generated/temperature plots/plot_5.html"></iframe>
  <iframe class="iframe" src="generated/temperature plots/plot_6.html"></iframe>
  <iframe class="iframe" src="generated/temperature plots/plot_7.html"></iframe>
  <button class="arrow-button" id="prevButton" onclick="prevSlide()">&#9664;</button>
  <button class="arrow-button" id="nextButton" onclick="nextSlide()">&#9658;</button>
</div>

<style>
  .iframe-container {
    position: relative;
    width: 100%; /* Adjust width as needed */
    height: 600px; /* Adjust initial height as needed */
    overflow: hidden;
  }

  .iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    opacity: 0;
    transition: opacity 0.5s;
  }

  .iframe:first-child {
    opacity: 1;
  }

  .arrow-button {
    position: absolute;
    top: 50%;
    z-index: 100;
    background-color: transparent;
    border: none;
    font-size: 24px;
    cursor: pointer;
  }

  #prevButton {
    left: 400px;
    transform: translateY(-50%);
  }

  #nextButton {
    right: 20px;
    transform: translateY(-50%);
  }
</style>

<script>
  var currentSlide = 0;
  var iframes = document.querySelectorAll('.iframe');
  var container = document.getElementById('iframe-container');

  function adjustSize() {
    var currentIframe = iframes[currentSlide];
    var contentWidth = currentIframe.contentWindow.document.body.scrollWidth;
    var contentHeight = currentIframe.contentWindow.document.body.scrollHeight;

    currentIframe.style.width = contentWidth + 'px';
    currentIframe.style.height = contentHeight + 'px';
    container.style.width = contentWidth + 'px';
    container.style.height = contentHeight + 'px';
  }

  window.onload = adjustSize;
  window.onresize = adjustSize;

  function nextSlide() {
    if (currentSlide < iframes.length - 1) {
      iframes[currentSlide].style.opacity = '0';
      currentSlide++;
      iframes[currentSlide].style.opacity = '1';
      adjustSize();
    }
  }

  function prevSlide() {
    if (currentSlide > 0) {
      iframes[currentSlide].style.opacity = '0';
      currentSlide--;
      iframes[currentSlide].style.opacity = '1';
      adjustSize();
    }
  }
</script>
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_climate$temp_graph)
```

### Precipitation

```{r, output=TRUE}
precip_graph <- read.csv("generated/precipitation.csv")
# Convert "date" column to Date type
precip_graph$date <- as.Date(precip_graph$time)
# Change these colors
plots_precip <- visualize_precipitation(precip_graph,city, save_path ="generated/precipitation plots")
```

```{=html}
<div class="iframe-container">
  <iframe class="iframe" src="generated/precipitation plots/plot_a.html" width="100%" height="600px"></iframe>
  <iframe class="iframe" src="generated/precipitation plots/plot_b.html" width="100%" height="600px"></iframe>
  <iframe class="iframe" src="generated/precipitation plots/plot_c.html" width="100%" height="600px"></iframe>
  <iframe class="iframe" src="generated/precipitation plots/plot_d.html" width="100%" height="600px"></iframe>
  <iframe class="iframe" src="generated/precipitation plots/plot_e.html" width="100%" height="600px"></iframe>
  <iframe class="iframe" src="generated/precipitation plots/plot_f.html" width="100%" height="600px"></iframe>
  <iframe class="iframe" src="generated/precipitation plots/plot_g.html" width="100%" height="600px"></iframe>
  <iframe class="iframe" src="generated/precipitation plots/plot_h.html" width="100%" height="600px"></iframe>
  <button class="arrow-button" onclick="nextSlide()">&#9658;</button>
</div>

<style>
  .iframe-container {
    position: relative;
    height: 600px; /* Adjust height as needed */
    width: 100%; /* Adjust width as needed */
    overflow: hidden;
  }

  .iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: none;
    opacity: 0;
    transition: opacity 0.5s;
  }

  .iframe:first-child {
    opacity: 1;
  }

  .arrow-button {
    position: absolute;
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
    z-index: 100;
    background-color: transparent;
    border: none;
    font-size: 24px;
    cursor: pointer;
  }
</style>

<script>
  var currentSlide = 0;
  var iframes = document.querySelectorAll('.iframe');

  function nextSlide() {
    if (currentSlide < iframes.length - 1) {
      iframes[currentSlide].style.opacity = '0';
      currentSlide++;
      iframes[currentSlide].style.opacity = '1';
    }
  }
</script>
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_climate$precip_graph)
```

## Heat related Impacts

### Urban Heat Island Projections

<!-- ![](generated/generated/plots/oxford-pop-growth.png) -->

```{r, output=TRUE}
# saveRDS(density_plot, "generated/plots/density.rds")
#ggplotly(readRDS("generated/plots/density.rds") + labs(y = "People per square kilometer"))
heat_graph <- read.csv("generated/urbanheatisland.csv")
names(heat_graph) <- sapply(str_remove_all(colnames(heat_graph), "X"), "[")
heat <- as.matrix(heat_graph[, -1])
rownames(heat) <- heat_graph[['Scenario']]


custom_colors <- c("grey", "#FFA500", "#FF0000")  # Yellow, Orange, Red


plot_uhi <- plot_ly()


heat <- heat[rowSums(heat != 0, na.rm = TRUE) > 0, ]

max_value <- max(heat)

# Add traces for each scenario as bars
for (i in 1:nrow(heat)) {
  plot_uhi <- add_trace(plot_uhi, 
                        x = colnames(heat), 
                        y = heat[i,], 
                        type = 'bar',
                        name = rownames(heat)[i],
                        marker = list(color = custom_colors[i]))
}

# Layout adjustments
plot_uhi <- layout(plot_uhi,
                   title = "Urban Heat Island by SSP Scenario",
                   xaxis = list(title = "Day and Night"),
                   yaxis = list(title = "Urban Heat Island increase"),
                   barmode = 'group',  # Group bars by scenario
                   showlegend = TRUE)  # Show legend for scenario names

# Show the plot
plot_uhi
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_uhi$uhi_chart)
```

### Urban Heat Island SSP5 2050 Day

```{r}
#| include: false
uhi <- fuzzy_read(spatial_dir, "uhi-ssp5_day_sum_reproj",rast)
add_uhi_layer <- create_layer_function(data = uhi, yaml_key = "uhi",group_id="urban-heat-island-ssp5-2050-day",title="Urban Heat Island")
all_maps <- add_uhi_layer(all_maps)
#   # This could be put into the add_*_layer() functions themselves
#   # hideGroup("population-density")
uhi_layers <- c(uhi_layers, "urban-heat-island-ssp5-2050-day")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_uhi$uhi_SSP5_day)
```

### Urban Heat Island SSP5 2050 Night

```{r}
#| include: false
uhi1 <- fuzzy_read(spatial_dir, "uhi-ssp5_nig_sum_reproj",rast)
values(uhi1)[values(uhi1) == 0] <-NA  
uhi1 <- terra::project(uhi1, "epsg:4326") 
add_uhi1_layer <- create_layer_function(data = uhi1, yaml_key = "uhi",group_id="urban-heat-island-ssp5-2050-night",title="Urban Heat Island")
all_maps <- add_uhi1_layer(all_maps)
#   # This could be put into the add_*_layer() functions themselves
#   # hideGroup("population-density")
uhi_layers <- c(uhi_layers, "urban-heat-island-ssp5-2050-night")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_uhi$uhi_SSP5_night)
```

## Floods
### Infrastructure
```{r}
#| include: false
health_points <- fuzzy_read(spatial_dir, "health$", FUN = vect)
school_points <- fuzzy_read(spatial_dir, "education$", FUN = vect) 
police_points <- fuzzy_read(spatial_dir, "police$", FUN = vect) 
road_lines <-fuzzy_read(spatial_dir, "roads_flood_SSP2_2050_1in100$", FUN = rast) 
values(road_lines)[values(road_lines) == 0] <-NA 
add_health_points_layer <- create_layer_function(data = health_points, yaml_key = "infrastructure-health",group_id="infrastructure")
add_school_points_layer <- create_layer_function(data = school_points, yaml_key = "infrastructure-school",group_id="infrastructure")
add_police_points_layer <- create_layer_function(data = police_points, yaml_key = "infrastructure-police",group_id="infrastructure")
add_roads_layer <-create_layer_function(data = road_lines, yaml_key = "infrastructure-roads",group_id="infrastructure")
all_maps <-add_health_points_layer(all_maps)%>% add_school_points_layer()%>% add_police_points_layer()%>% add_school_points_layer()%>% add_roads_layer()
pu_layers <- c(pu_layers, "infrastructure")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_water$infrastructure)
```

### Combined Flooding 2020

```{r}
#| include: false
library(raster)
sub_dir <- "fathom"
comb_low_2020 <- fuzzy_read(spatial_dir, "comb_SSP1_2020_1in10.tif", rast)
comb_med_2020 <- fuzzy_read(spatial_dir, "comb_SSP1_2020_1in100.tif", rast)
comb_high_2020 <- fuzzy_read(spatial_dir, "comb_SSP1_2020_1in1000.tif", rast)
# Interactive Plot (Leaflet)
combined_2020 <- max(comb_low_2020, comb_med_2020, comb_high_2020, na.rm = TRUE)

# Replace negative values with zero
combined_2020_positive <- combined_2020
combined_2020_positive[combined_2020_positive <= 0] <- NA

add_comb_2020_layer <- create_layer_function(data = combined_2020_positive, yaml_key = "comb",group_id="combined-flooding-2020")
all_maps <-add_comb_2020_layer(all_maps)
comb_layers <- c(comb_layers, "combined-flooding-2020")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_water$pluvial_flooding_2020)
```
### Population Exposed 2020

```{r}
#| include: false
pop_low_2020 <- fuzzy_read(spatial_dir, "exposure_of_Population_SSP1_2020_1in10.tif", rast)
pop_med_2020 <- fuzzy_read(spatial_dir, "exposure_of_Population_SSP1_2020_1in100.tif", rast)

# Interactive Plot (Leaflet)
pop_2020 <- max(pop_low_2020, pop_med_2020,na.rm = TRUE)
masked_pop_2020 <- mask(pop_2020, aoi)

# # Replace negative values with zero
# pop_2020_positive <- pop_2020
# pop_2020_positive[pop_2020_positive <= 0] <- NA

add_pop_2020_layer <- create_layer_function(data = masked_pop_2020, yaml_key = "pop_flood",group_id="population-exposed-2020")
all_maps <-add_pop_2020_layer(all_maps)
comb_layers <- c(comb_layers, "population-exposed-2020")
```


```{r}
#| output: asis
pop_columns <- c("X1.LowRiskPop", "X2.ModerateRiskPop", "X3.HighRiskPop", "X4.VeryHighRiskPop")
graphs_pop <- pop_exposed("generated/pop_exposure.csv", 2020,pop_columns )
graphs_pop
print_slide_text(slide_texts$FCS_water$pop_flooding_2020)
```
### Roads Exposed 2020
```{r}
#| include: false
road_low_2020 <- fuzzy_read(spatial_dir, "rce_SSP1_2020_1in10", rast)
values(road_low_2020)[values(road_low_2020) == 0] <-NA  
# # Replace negative values with zero
# pop_2020_positive <- pop_2020
# pop_2020_positive[pop_2020_positive <= 0] <- NA

add_road_2020_layer <- create_layer_function(data = road_low_2020, yaml_key = "roads-exposed",group_id="roads-exposed-2020")
all_maps <-add_road_2020_layer(all_maps)
comb_layers <- c(comb_layers, "roads-exposed-2020")
```

```{r}
#| output: asis
graphs_2020 <- roads_exposed("generated/road_exposure.csv", 2020)
graphs_2020[[1]]
print_slide_text(slide_texts$FCS_water$road_flooding_2020)
```

### Combined Flooding SSP2 2050

```{r}
#| include: false
comb_low_2050 <- fuzzy_read(spatial_dir, "comb_flood_SSP2_2050_1in10.tif", rast)
comb_med_2050 <- fuzzy_read(spatial_dir, "comb_flood_SSP2_2050_1in100.tif", rast) * 10
comb_high_2050 <- fuzzy_read(spatial_dir, "comb_flood_SSP2_2050_1in1000.tif", rast) * 11
# Interactive Plot (Leaflet)
combined_2050 <- max(comb_low_2050, comb_med_2050, na.rm = T)
# Replace negative values with zero
combined_2050_positive <- combined_2050
combined_2050_positive[combined_2050_positive <= 0] <- NA

add_comb_2050_layer <- create_layer_function(data = combined_2050_positive, yaml_key = "comb",group_id="combined-flooding-ssp2-2050")
all_maps <-add_comb_2050_layer(all_maps)
comb_layers <- c(comb_layers, "combined-flooding-ssp2-2050")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_water$pluvial_flooding_SSP2_2050)
```

### Combined Flooding SSP5 2050

```{r}
#| include: false
comb_low_2050 <- fuzzy_read(spatial_dir, "comb_flood_SSP5_2050_1in10.tif", rast)
comb_med_2050 <- fuzzy_read(spatial_dir, "comb_flood_SSP5_2050_1in100.tif", rast) * 10
comb_high_2050 <- fuzzy_read(spatial_dir, "comb_flood_SSP5_2050_1in1000.tif", rast) * 11
# Interactive Plot (Leaflet)
combined_2050_5 <- max(comb_low_2050, comb_med_2050, na.rm = T)
# Replace negative values with zero
combined_2050_5_positive <- combined_2050_5
combined_2050_5_positive[combined_2050_5_positive <= 0] <- NA

add_comb_ssp5_2050_layer <- create_layer_function(data = combined_2050_5_positive, yaml_key = "comb",group_id="combined-flooding-ssp5-2050")
all_maps <-add_comb_ssp5_2050_layer(all_maps)
comb_layers <- c(comb_layers, "combined-flooding-ssp5-2050")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_water$pluvial_flooding_SSP2_2050)
```
###  Population Exposed to Floods in 2050
```{r, output=TRUE}
#pop_columns <- c("X1.LowRiskPop", "X2.ModerateRiskPop", "X3.HighRiskPop", "X4.VeryHighRiskPop")
#graphs_pop <- pop_exposed("generated/pop_exposure.csv",2050,pop_columns)
#graphs_pop[[2]]
#graphs_pop[[4]]
```
###  Roads Exposed to Floods in 2050
```{r, output=TRUE}
graphs_2050 <- roads_exposed("generated/road_exposure.csv", 2050)
graphs_2050[[2]]
graphs_2050[[4]]
```
### Combined Flooding SSP2 2080

```{r}
#| include: false
comb_low_2080 <- fuzzy_read(spatial_dir, "comb_flood_SSP2_2080_1in10.tif", rast)
comb_med_2080 <- fuzzy_read(spatial_dir, "comb_flood_SSP2_2080_1in100.tif", rast) * 10
comb_high_2080 <- fuzzy_read(spatial_dir, "comb_flood_SSP2_2080_1in1000.tif", rast) * 11
# Interactive Plot (Leaflet)
combined_2080 <- max(comb_low_2080, comb_med_2080, na.rm = T)
# Replace negative values with zero
combined_2080_positive <- combined_2080
combined_2080_positive[combined_2080_positive <= 0] <- NA

add_comb_2080_layer <- create_layer_function(data = combined_2080_positive, yaml_key = "comb",group_id="combined-flooding-ssp2-2080")
all_maps <-add_comb_2080_layer(all_maps)
comb_layers <- c(comb_layers, "combined-flooding-ssp2-2080")

```

###  Roads Exposed to Floods in 2050
```{r, output=TRUE}
graphs_2080 <- roads_exposed("generated/road_exposure.csv", 2080)
graphs_2080[[2]]
graphs_2080[[4]]
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_water$pluvial_flooding_SSP2_2080)
```
###  Population Exposed to Floods
```{r, output=TRUE}
pop_exposed <- read.csv("generated/pop_exposure.csv")

selected_columns <- pop_exposed[, c("return_period", "ssp", "X1.LowRiskPop", "X2.ModerateRiskPop", "X3.HighRiskPop", "X4.VeryHighRiskPop")]


long_data <- pivot_longer(selected_columns,
                          cols = starts_with("X"),
                          names_to = "RiskCategory",
                          values_to = "Population")


long_data$RiskCategory <- factor(long_data$RiskCategory,
                                 levels = c("X1.LowRiskPop", "X2.ModerateRiskPop", "X3.HighRiskPop", "X4.VeryHighRiskPop"),
                                 labels = c("Low Risk", "Moderate Risk", "High Risk", "Very High Risk"))


ggplot_graph <- ggplot(long_data, aes(x = factor(return_period), y = Population, fill = RiskCategory)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ ssp) +
  labs(title = "Population exposed to floods",
       x = "Return Period",
       y = "Population",
       fill = "Risk Category") +
  scale_fill_manual(values = c("Low Risk" = "grey", 
                               "Moderate Risk" = "orange", 
                               "High Risk" = "red", 
                               "Very High Risk" = "darkred")) +  # Custom colors
  theme_minimal()

pop_exposed_graph <- ggplotly(ggplot_graph)
pop_exposed_graph
```

### Water scarcity

```{r, output=TRUE}
# saveRDS(density_plot, "generated/plots/density.rds")
#ggplotly(readRDS("generated/plots/density.rds") + labs(y = "People per square kilometer"))
water <- read.csv("generated/waterscarcity.csv")
names(water) <- sapply(str_remove_all(colnames(water), "X"), "[")
w <- as.matrix(water[, -1])
rownames(w) <- water[['Scenario']]

# Remove first and last columns
w <- w[, -c(1, ncol(w))]

# Remove 'WSI_' prefix from column names
colnames(w) <- sub("^WSI_", "", colnames(w))

w_char <- format(w, digits = 2, nsmall = 2)

# Create a Plotly plot
plot_ly(z = w, colorscale = "RdOrYl") %>%
  add_heatmap(x = colnames(w), y = rownames(w), text = w_char,
              hoverinfo = "text") %>%
  layout(
    title = "Water Scarcity",
    xaxis = list(title = "Month"),
    yaxis = list(title = "Scenario"),
    hoverlabel = list(font = list(color = "white"))  # Set hover text color
  )
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_water$water_chart)
```

## Biophysical Impacts

### Future Erosion
```{r, output=TRUE}
erosion_graph <-read.csv("generated/erosion.csv")
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_erosion$erosion_chart)
```

### Tropical Cyclones

```{r, output=TRUE}
cyclone_graph <-read.csv("generated/cyclones.csv")
cyclone_plot <- visualize_cyclones(cyclone_graph,city,country)
```

```{r}
#| output: asis
print_slide_text(slide_texts$FCS_cyclones$cyclones_chart)
```

```{r}
added_layers <-c(pop_layers, gdp_layers,ul_layers,ahe_layers,uhi_layers,pu_layers,fu_layers,comb_layers)
```

### Feedback

```{ojs}
//| output: true
viewof ul3 = Inputs.textarea({placeholder: "What are the key takeaways from this data?", width: "100%"})
// I could set submit: true to require a submit button, but I think it's easier if they don't have to
// Only helpful if we're doing something other than letting them record everything at the end
```
:::

::: maps
```{r}
#| output: true
all_maps %>%
  add_aoi() %>%
  addLayersControl(
    overlayGroups = added_layers,
    options = layersControlOptions(collapsed = FALSE))
```
:::
